{"compress":true,"commitItems":[["95daa06f-96ac-4856-9612-1bdbd0b8e2c2",1555167556763,"---\nlayout: post\ntitle: (转发)Paxos算法原理\nsubtitle: \ndate: 2019-02-13T00:00:00.000Z\nauthor: kmg\nheader-img: img/post-bg-os-metro.jpg\ncatalog: true\ntags:\n  - 分布式一致性算法\npin: true\n---\n> 原文来自知乎，此为地址链接 [祥光-Paxos算法详解](https://zhuanlan.zhihu.com/p/31780743)\n\n## 一、Paxos算法背景\n\nPaxos算法是Lamport宗师提出的一种基于**消息传递**的**分布式一致性算法**，使其获得2013年图灵奖。\n\nPaxos由Lamport于1998年在《The Part-Time Parliament》论文中首次公开，最初的描述使用希腊的一个小岛Paxos作为比喻，描述了Paxos小岛中通过决议的流程，并以此命名这个算法，但是这个描述理解起来比较有挑战性。后来在2001年，Lamport觉得同行不能理解他的幽默感，于是重新发表了朴实的算法描述版本《Paxos Made Simple》。\n\n自Paxos问世以来就持续垄断了分布式一致性算法，Paxos这个名词几乎等同于分布式一致性。Google的很多大型分布式系统都采用了Paxos算法来解决分布式一致性问题，如Chubby、Megastore以及Spanner等。开源的ZooKeeper，以及MySQL 5.7推出的用来取代传统的主从复制的MySQL Group Replication等纷纷采用Paxos算法解决分布式一致性问题。\n\n然而，Paxos的最大特点就是难，不仅难以理解，更难以实现。\n\n## 二、Paxos算法流程\n\nPaxos算法解决的问题正是分布式一致性问题，即一个分布式系统中的各个进程如何就某个值（决议）达成一致。\n\nPaxos算法运行在允许宕机故障的异步系统中，不要求可靠的消息传递，可容忍消息丢失、延迟、乱序以及重复。它利用大多数 (Majority) 机制保证了2F+1的容错能力，即2F+1个节点的系统最多允许F个节点同时出现故障。\n\n一个或多个提议进程 (Proposer) 可以发起提案 (Proposal)，Paxos算法使所有提案中的某一个提案，在所有进程中达成一致。系统中的多数派同时认可该提案，即达成了一致。最多只针对一个确定的提案达成一致。\n\nPaxos将系统中的角色分为提议者 (Proposer)，决策者 (Acceptor)，和最终决策学习者 (Learner):\n\n*   **Proposer**: 提出提案 (Proposal)。Proposal信息包括提案编号 (Proposal ID) 和提议的值 (Value)。\n*   **Acceptor**：参与决策，回应Proposers的提案。收到Proposal后可以接受提案，若Proposal获得多数Acceptors的接受，则称该Proposal被批准。\n*   **Learner**：不参与决策，从Proposers/Acceptors学习最新达成一致的提案（Value）。\n\n在多副本状态机中，每个副本同时具有Proposer、Acceptor、Learner三种角色。\n\n![](/img/paxos/v2-2c0d971fcca713a8e045a93d7881aedc_hd.jpg)\n\nPaxos算法中的角色\n\nPaxos算法通过一个决议分为两个阶段（Learn阶段之前决议已经形成）：\n\n1.  第一阶段：Prepare阶段。Proposer向Acceptors发出Prepare请求，Acceptors针对收到的Prepare请求进行Promise承诺。\n2.  第二阶段：Accept阶段。Proposer收到多数Acceptors承诺的Promise后，向Acceptors发出Propose请求，Acceptors针对收到的Propose请求进行Accept处理。\n3.  第三阶段：Learn阶段。Proposer在收到多数Acceptors的Accept之后，标志着本次Accept成功，决议形成，将形成的决议发送给所有Learners。\n\n![](/img/paxos/v2-a6cd35d4045134b703f9d125b1ce9671_hd.jpg)\n\nPaxos算法流程\n\nPaxos算法流程中的每条消息描述如下：\n\n*   **Prepare**: Proposer生成全局唯一且递增的Proposal ID (可使用时间戳加Server ID)，向所有Acceptors发送Prepare请求，这里无需携带提案内容，只携带Proposal ID即可。\n*   **Promise**: Acceptors收到Prepare请求后，做出“两个承诺，一个应答”。\n\n两个承诺：\n\n1\\. 不再接受Proposal ID小于等于（注意：这里是<= ）当前请求的Prepare请求。\n\n2\\. 不再接受Proposal ID小于（注意：这里是< ）当前请求的Propose请求。\n\n一个应答：\n\n不违背以前作出的承诺下，回复已经Accept过的提案中Proposal ID最大的那个提案的Value和Proposal ID，没有则返回空值。\n\n*   **Propose**: Proposer 收到多数Acceptors的Promise应答后，从应答中选择Proposal ID最大的提案的Value，作为本次要发起的提案。如果所有应答的提案Value均为空值，则可以自己随意决定提案Value。然后携带当前Proposal ID，向所有Acceptors发送Propose请求。\n*   **Accept**: Acceptor收到Propose请求后，在不违背自己之前作出的承诺下，接受并持久化当前Proposal ID和提案Value。\n*   **Learn**: Proposer收到多数Acceptors的Accept后，决议形成，将形成的决议发送给所有Learners。\n\nPaxos算法伪代码描述如下：\n\n![](/img/paxos/v2-8d4eaf5fdeb145e8bdf5e3bb1af408c9_hd.jpg)\n\nPaxos算法伪代码\n\n1.  获取一个Proposal ID n，为了保证Proposal ID唯一，可采用时间戳+Server ID生成；\n2.  Proposer向所有Acceptors广播Prepare(n)请求；\n3.  Acceptor比较n和minProposal，如果n>minProposal，minProposal=n，并且将 acceptedProposal 和 acceptedValue 返回；\n4.  Proposer接收到过半数回复后，如果发现有acceptedValue返回，将所有回复中acceptedProposal最大的acceptedValue作为本次提案的value，否则可以任意决定本次提案的value；\n5.  到这里可以进入第二阶段，广播Accept (n,value) 到所有节点；\n6.  Acceptor比较n和minProposal，如果n>=minProposal，则acceptedProposal=minProposal=n，acceptedValue=value，本地持久化后，返回；否则，返回minProposal。\n7.  提议者接收到过半数请求后，如果发现有返回值result >n，表示有更新的提议，跳转到1；否则value达成一致。\n\n下面举几个例子，实例1如下图：\n\n![](/img/paxos/v2-ac7e4a827f77dc57d316c77ae95e1940_hd.jpg)\n\nPaxos算法实例1\n\n图中P代表Prepare阶段，A代表Accept阶段。3.1代表Proposal ID为3.1，其中3为时间戳，1为Server ID。X和Y代表提议Value。\n\n实例1中P 3.1达成多数派，其Value(X)被Accept，然后P 4.5学习到Value(X)，并Accept。\n\n![](/img/paxos/v2-3ae48cb81d39079022666ccb35821c71_hd.jpg)\n\nPaxos算法实例2\n\n实例2中P 3.1没有被多数派Accept（只有S3 Accept），但是被P 4.5学习到，P 4.5将自己的Value由Y替换为X，Accept（X）。\n\n![](/img/paxos/v2-931f9487900f0f002867c9e116dec255_hd.jpg)\n\nPaxos算法实例3\n\n实例3中P 3.1没有被多数派Accept（只有S1 Accept），同时也没有被P 4.5学习到。由于P 4.5 Propose的所有应答，均未返回Value，则P 4.5可以Accept自己的Value (Y)。后续P 3.1的Accept (X) 会失败，已经Accept的S1，会被覆盖。\n\nPaxos算法可能形成活锁而永远不会结束，如下图实例所示：\n\n![](/img/paxos/v2-0e18b29659367076ff1c0156ae46eca0_hd.jpg)\n\nPaxos算法形成活锁\n\n回顾两个承诺之一，Acceptor不再应答Proposal ID小于等于当前请求的Prepare请求。意味着需要应答Proposal ID大于当前请求的Prepare请求。\n\n两个Proposers交替Prepare成功，而Accept失败，形成活锁（Livelock）。\n\n## 三、Multi-Paxos算法\n\n原始的Paxos算法（Basic Paxos）只能对一个值形成决议，决议的形成至少需要两次网络来回，在高并发情况下可能需要更多的网络来回，极端情况下甚至可能形成活锁。如果想连续确定多个值，Basic Paxos搞不定了。因此Basic Paxos几乎只是用来做理论研究，并不直接应用在实际工程中。\n\n实际应用中几乎都需要连续确定多个值，而且希望能有更高的效率。Multi-Paxos正是为解决此问题而提出。Multi-Paxos基于Basic Paxos做了两点改进：\n\n1.  针对每一个要确定的值，运行一次Paxos算法实例（Instance），形成决议。每一个Paxos实例使用唯一的Instance ID标识。\n2.  在所有Proposers中选举一个Leader，由Leader唯一地提交Proposal给Acceptors进行表决。这样没有Proposer竞争，解决了活锁问题。在系统中仅有一个Leader进行Value提交的情况下，Prepare阶段就可以跳过，从而将两阶段变为一阶段，提高效率。\n\n![](/img/paxos/v2-e5cd197abc9c922ca4ca91c3df74fa70_hd.jpg)\n\nMulti-Paxos流程\n\nMulti-Paxos首先需要选举Leader，Leader的确定也是一次决议的形成，所以可执行一次Basic Paxos实例来选举出一个Leader。选出Leader之后只能由Leader提交Proposal，在Leader宕机之后服务临时不可用，需要重新选举Leader继续服务。在系统中仅有一个Leader进行Proposal提交的情况下，Prepare阶段可以跳过。\n\nMulti-Paxos通过改变Prepare阶段的作用范围至后面Leader提交的所有实例，从而使得Leader的连续提交只需要执行一次Prepare阶段，后续只需要执行Accept阶段，将两阶段变为一阶段，提高了效率。为了区分连续提交的多个实例，每个实例使用一个Instance ID标识，Instance ID由Leader本地递增生成即可。\n\nMulti-Paxos允许有多个自认为是Leader的节点并发提交Proposal而不影响其安全性，这样的场景即退化为Basic Paxos。\n\nChubby和Boxwood均使用Multi-Paxos。ZooKeeper使用的Zab也是Multi-Paxos的变形。\n\n## 附Paxos算法推导过程\n\nPaxos算法的设计过程就是从正确性开始的，对于分布式一致性问题，很多进程提出（Propose）不同的值，共识算法保证最终只有其中一个值被选定，Safety表述如下：\n\n*   只有被提出（Propose）的值才可能被最终选定（Chosen）。\n*   只有**一**个值会被选定（Chosen）。\n*   进程只会获知到已经确认被选定（Chosen）的值。\n\nPaxos以这几条约束作为出发点进行设计，只要算法最终满足这几点，正确性就不需要证明了。Paxos算法中共分为三种参与者：Proposer、Acceptor以及Learner，通常实现中每个进程都同时扮演这三个角色。\n\nProposers向Acceptors提出Proposal，为了保证最多只有**一**个值被选定（Chosen），Proposal必须被超过一半的Acceptors所接受（Accept），且每个Acceptor只能接受一个值。\n\n为了保证正常运行（必须有值被接受），所以Paxos算法中：\n\n**P1：Acceptor必须接受（Accept）它所收到的第一个Proposal。**\n\n先来先服务，合情合理。但这样产生一个问题，如果多个Proposers同时提出Proposal，很可能会导致无法达成一致，因为没有Propopal被超过一半Acceptors的接受，因此，Acceptor必须能够接受多个Proposal，不同的Proposal由不同的编号进行区分，当某个Proposal被超过一半的Acceptors接受后，这个Proposal就被选定了。\n\n既然允许Acceptors接受多个Proposal就有可能出现多个不同值都被最终选定的情况，这违背了Safety要求，为了保证Safety要求，Paxos进一步提出：\n\n**P2：如果值为v的Proposal被选定（Chosen），则任何被选定（Chosen）的具有更高编号的Proposal值也一定为v。**\n\n只要算法同时满足**P1**和**P2**，就保证了Safety。**P2**是一个比较宽泛的约定，完全没有算法细节，我们对其进一步延伸：\n\n**P2a：如果值为v的Proposal被选定（Chosen），则对所有的Acceptors，它们接受（Accept）的任何具有更高编号的Proposal值也一定为v。**\n\n如果满足**P2a**则一定满足**P2**，显然，因为只有首先被接受才有可能被最终选定。但是**P2a**依然难以实现，因为acceptor很有可能并不知道之前被选定的Proposal（恰好不在接受它的多数派中），因此进一步延伸：\n\n**P2b：如果值为v的Proposal被选定（Chosen），则对所有的Proposer，它们提出的的任何具有更高编号的Proposal值也一定为v。**\n\n更进一步的：\n\n**P2c：为了提出值为v且编号为n的Proposal，必须存在一个包含超过一半Acceptors的集合S，满足(1) 没有任何S中的Acceptors曾经接受（Accept）过编号比n小的Proposal，或者(2) v和S中的Acceptors所接受过(Accept)的编号最大且小于n的Proposal值一致。**\n\n满足**P2c**即满足**P2b**即满足**P2a**即满足**P2**。至此Paxos提出了Proposer的执行流程，以满足**P2c**：\n\n1.  Proposer选择一个新的编号n，向超过一半的Acceptors发送请求消息，Acceptor回复: (a)承诺不会接受编号比n小的proposal，以及(b)它所接受过的编号比n小的最大Proposal（如果有）。该请求称为Prepare请求。\n2.  如果Proposer收到超过一半Acceptors的回复，它就可以提出Proposal，Proposal的值为收到回复中编号最大的Proposal的值，如果没有这样的值，则可以自由提出任何值。\n3.  向收到回复的Acceptors发送Accept请求，请求对方接受提出的Proposal。\n\n仔细品味Proposer的执行流程，其完全吻合**P2c**中的要求，但你可能也发现了，当多个Proposer同时运行时，有可能出现没有任何Proposal可以成功被接受的情况（编号递增的交替完成第一步），这就是Paxos算法的Liveness问题，或者叫“活锁”，论文中建议通过对Proposers引入选主算法选出Distinguished Proposer来全权负责提出Proposal来解决这个问题，但是即使在出现多个Proposers同时提出Proposal的情况时，Paxos算法也可以保证Safety。\n\n接下来看看Acceptors的执行过程，和我们对**P2**做的事情一样，我们对**P1**进行延伸：\n\n**P1a：Acceptor可以接受（Accept）编号为n的Proposal当且仅当它没有回复过一个具有更大编号的Prepare消息。**\n\n易见，**P1a**包含了**P1**，对于Acceptors：\n\n1.  当收到Prepare请求时，如果其编号n大于之前所收到的Prepare消息，则回复。\n2.  当收到Accept请求时，仅当它没有回复过一个具有更大编号的Prepare消息，接受该Proposal并回复。\n\n以上涵盖了满足**P1a**和**P2b**的一套完整一致性算法。",[[1555167555893,["kmg@DESKTOP-L4V0PJN",[[1,48,"null"],[-1,161,"\npin: true"]],[0,0],[0,0]]],[1555167576946,["kmg@DESKTOP-L4V0PJN",[[-1,24,"(转发)Paxos算法原理"]],[24,37],[24,24]]],[1555167580453,["kmg@DESKTOP-L4V0PJN",[[1,24,"Javazi"]],[24,24],[30,30]]],[1555167581453,["kmg@DESKTOP-L4V0PJN",[[-1,28,"zi"]],[30,30],[28,28]]],[1555167586306,["kmg@DESKTOP-L4V0PJN",[[1,28,"自定义注解"]],[28,28],[33,33]]],[1555170042875,["kmg@DESKTOP-L4V0PJN",[[-1,166,"> 原文来自知乎，此为地址链接 [祥光-Paxos算法详解](https://zhuanlan.zhihu.com/p/31780743)"],[-1,236,"\n## 一、Paxos算法背景\n\nPaxos算法是Lamport宗师提出的一种基于**消息传递**的**分布式一致性算法**，使其获得2013年图灵奖。\n\nPaxos由Lamport于1998年在《The Part-Time Parliament》论文中首次公开，最初的描述使用希腊的一个小岛Paxos作为比喻，描述了Paxos小岛中通过决议的流程，并以此命名这个算法，但是这个描述理解起来比较有挑战性。后来在2001年，Lamport觉得同行不能理解他的幽默感，于是重新发表了朴实的算法描述版本《Paxos Made Simple》。\n\n自Paxos问世以来就持续垄断了分布式一致性算法，Paxos这个名词几乎等同于分布式一致性。Google的很多大型分布式系统都采用了Paxos算法来解决分布式一致性问题，如Chubby、Megastore以及Spanner等。开源的ZooKeeper，以及MySQL 5.7推出的用来取代传统的主从复制的MySQL Group Replication等纷纷采用Paxos算法解决分布式一致性问题。\n\n然而，Paxos的最大特点就是难，不仅难以理解，更难以实现。\n\n## 二、Paxos算法流程\n\nPaxos算法解决的问题正是分布式一致性问题，即一个分布式系统中的各个进程如何就某个值（决议）达成一致。\n\nPaxos算法运行在允许宕机故障的异步系统中，不要求可靠的消息传递，可容忍消息丢失、延迟、乱序以及重复。它利用大多数 (Majority) 机制保证了2F+1的容错能力，即2F+1个节点的系统最多允许F个节点同时出现故障。\n\n一个或多个提议进程 (Proposer) 可以发起提案 (Proposal)，Paxos算法使所有提案中的某一个提案，在所有进程中达成一致。系统中的多数派同时认可该提案，即达成了一致。最多只针对一个确定的提案达成一致。\n\nPaxos将系统中的角色分为提议者 (Proposer)，决策者 (Acceptor)，和最终决策学习者 (Learner):\n\n*   **Proposer**: 提出提案 (Proposal)。Proposal信息包括提案编号 (Proposal ID) 和提议的值 (Value)。\n*   **Acceptor**：参与决策，回应Proposers的提案。收到Proposal后可以接受提案，若Proposal获得多数Acceptors的接受，则称该Proposal被批准。\n*   **Learner**：不参与决策，从Proposers/Acceptors学习最新达成一致的提案（Value）。\n\n在多副本状态机中，每个副本同时具有Proposer、Acceptor、Learner三种角色。\n\n![](/img/paxos/v2-2c0d971fcca713a8e045a93d7881aedc_hd.jpg)\n\nPaxos算法中的角色\n\nPaxos算法通过一个决议分为两个阶段（Learn阶段之前决议已经形成）：\n\n1.  第一阶段：Prepare阶段。Proposer向Acceptors发出Prepare请求，Acceptors针对收到的Prepare请求进行Promise承诺。\n2.  第二阶段：Accept阶段。Proposer收到多数Acceptors承诺的Promise后，向Acceptors发出Propose请求，Acceptors针对收到的Propose请求进行Accept处理。\n3.  第三阶段：Learn阶段。Proposer在收到多数Acceptors的Accept之后，标志着本次Accept成功，决议形成，将形成的决议发送给所有Learners。\n\n![](/img/paxos/v2-a6cd35d4045134b703f9d125b1ce9671_hd.jpg)\n\nPaxos算法流程\n\nPaxos算法流程中的每条消息描述如下：\n\n*   **Prepare**: Proposer生成全局唯一且递增的Proposal ID (可使用时间戳加Server ID)，向所有Acceptors发送Prepare请求，这里无需携带提案内容，只携带Proposal ID即可。\n*   **Promise**: Acceptors收到Prepare请求后，做出“两个承诺，一个应答”。\n\n两个承诺：\n\n1\\. 不再接受Proposal ID小于等于（注意：这里是<= ）当前请求的Prepare请求。\n\n2\\. 不再接受Proposal ID小于（注意：这里是< ）当前请求的Propose请求。\n\n一个应答：\n\n不违背以前作出的承诺下，回复已经Accept过的提案中Proposal ID最大的那个提案的Value和Proposal ID，没有则返回空值。\n\n*   **Propose**: Proposer 收到多数Acceptors的Promise应答后，从应答中选择Proposal ID最大的提案的Value，作为本次要发起的提案。如果所有应答的提案Value均为空值，则可以自己随意决定提案Value。然后携带当前Proposal ID，向所有Acceptors发送Propose请求。\n*   **Accept**: Acceptor收到Propose请求后，在不违背自己之前作出的承诺下，接受并持久化当前Proposal ID和提案Value。\n*   **Learn**: Proposer收到多数Acceptors的Accept后，决议形成，将形成的决议发送给所有Learners。\n\nPaxos算法伪代码描述如下：\n\n![](/img/paxos/v2-8d4eaf5fdeb145e8bdf5e3bb1af408c9_hd.jpg)\n\nPaxos算法伪代码\n\n1.  获取一个Proposal ID n，为了保证Proposal ID唯一，可采用时间戳+Server ID生成；\n2.  Proposer向所有Acceptors广播Prepare(n)请求；\n3.  Acceptor比较n和minProposal，如果n>minProposal，minProposal=n，并且将 acceptedProposal 和 acceptedValue 返回；\n4.  Proposer接收到过半数回复后，如果发现有acceptedValue返回，将所有回复中acceptedProposal最大的acceptedValue作为本次提案的value，否则可以任意决定本次提案的value；\n5.  到这里可以进入第二阶段，广播Accept (n,value) 到所有节点；\n6.  Acceptor比较n和minProposal，如果n>=minProposal，则acceptedProposal=minProposal=n，acceptedValue=value，本地持久化后，返回；否则，返回minProposal。\n7.  提议者接收到过半数请求后，如果发现有返回值result >n，表示有更新的提议，跳转到1；否则value达成一致。\n\n下面举几个例子，实例1如下图：\n\n![](/img/paxos/v2-ac7e4a827f77dc57d316c77ae95e1940_hd.jpg)\n\nPaxos算法实例1\n\n图中P代表Prepare阶段，A代表Accept阶段。3.1代表Proposal ID为3.1，其中3为时间戳，1为Server ID。X和Y代表提议Value。\n\n实例1中P 3.1达成多数派，其Value(X)被Accept，然后P 4.5学习到Value(X)，并Accept。\n\n![](/img/paxos/v2-3ae48cb81d39079022666ccb35821c71_hd.jpg)\n\nPaxos算法实例2\n\n实例2中P 3.1没有被多数派Accept（只有S3 Accept），但是被P 4.5学习到，P 4.5将自己的Value由Y替换为X，Accept（X）。\n\n![](/img/paxos/v2-931f9487900f0f002867c9e116dec255_hd.jpg)\n\nPaxos算法实例3\n\n实例3中P 3.1没有被多数派Accept（只有S1 Accept），同时也没有被P 4.5学习到。由于P 4.5 Propose的所有应答，均未返回Value，则P 4.5可以Accept自己的Value (Y)。后续P 3.1的Accept (X) 会失败，已经Accept的S1，会被覆盖。\n\nPaxos算法可能形成活锁而永远不会结束，如下图实例所示：\n\n![](/img/paxos/v2-0e18b29659367076ff1c0156ae46eca0_hd.jpg)\n\nPaxos算法形成活锁\n\n回顾两个承诺之一，Acceptor不再应答Proposal ID小于等于当前请求的Prepare请求。意味着需要应答Proposal ID大于当前请求的Prepare请求。\n\n两个Proposers交替Prepare成功，而Accept失败，形成活锁（Livelock）。\n\n## 三、Multi-Paxos算法\n\n原始的Paxos算法（Basic Paxos）只能对一个值形成决议，决议的形成至少需要两次网络来回，在高并发情况下可能需要更多的网络来回，极端情况下甚至可能形成活锁。如果想连续确定多个值，Basic Paxos搞不定了。因此Basic Paxos几乎只是用来做理论研究，并不直接应用在实际工程中。\n\n实际应用中几乎都需要连续确定多个值，而且希望能有更高的效率。Multi-Paxos正是为解决此问题而提出。Multi-Paxos基于Basic Paxos做了两点改进：\n\n1.  针对每一个要确定的值，运行一次Paxos算法实例（Instance），形成决议。每一个Paxos实例使用唯一的Instance ID标识。\n2.  在所有Proposers中选举一个Leader，由Leader唯一地提交Proposal给Acceptors进行表决。这样没有Proposer竞争，解决了活锁问题。在系统中仅有一个Leader进行Value提交的情况下，Prepare阶段就可以跳过，从而将两阶段变为一阶段，提高效率。\n\n![](/img/paxos/v2-e5cd197abc9c922ca4ca91c3df74fa70_hd.jpg)\n\nMulti-Paxos流程\n\nMulti-Paxos首先需要选举Leader，Leader的确定也是一次决议的形成，所以可执行一次Basic Paxos实例来选举出一个Leader。选出Leader之后只能由Leader提交Proposal，在Leader宕机之后服务临时不可用，需要重新选举Leader继续服务。在系统中仅有一个Leader进行Proposal提交的情况下，Prepare阶段可以跳过。\n\nMulti-Paxos通过改变Prepare阶段的作用范围至后面Leader提交的所有实例，从而使得Leader的连续提交只需要执行一次Prepare阶段，后续只需要执行Accept阶段，将两阶段变为一阶段，提高了效率。为了区分连续提交的多个实例，每个实例使用一个Instance ID标识，Instance ID由Leader本地递增生成即可。\n\nMulti-Paxos允许有多个自认为是Leader的节点并发提交Proposal而不影响其安全性，这样的场景即退化为Basic Paxos。\n\nChubby和Boxwood均使用Multi-Paxos。ZooKeeper使用的Zab也是Multi-Paxos的变形。\n\n## 附Paxos算法推导过程\n\nPaxos算法的设计过程就是从正确性开始的，对于分布式一致性问题，很多进程提出（Propose）不同的值，共识算法保证最终只有其中一个值被选定，Safety表述如下：\n\n*   只有被提出（Propose）的值才可能被最终选定（Chosen）。\n*   只有**一**个值会被选定（Chosen）。\n*   进程只会获知到已经确认被选定（Chosen）的值。\n\nPaxos以这几条约束作为出发点进行设计，只要算法最终满足这几点，正确性就不需要证明了。Paxos算法中共分为三种参与者：Proposer、Acceptor以及Learner，通常实现中每个进程都同时扮演这三个角色。\n\nProposers向Acceptors提出Proposal，为了保证最多只有**一**个值被选定（Chosen），Proposal必须被超过一半的Acceptors所接受（Accept），且每个Acceptor只能接受一个值。\n\n为了保证正常运行（必须有值被接受），所以Paxos算法中：\n\n**P1：Acceptor必须接受（Accept）它所收到的第一个Proposal。**\n\n先来先服务，合情合理。但这样产生一个问题，如果多个Proposers同时提出Proposal，很可能会导致无法达成一致，因为没有Propopal被超过一半Acceptors的接受，因此，Acceptor必须能够接受多个Proposal，不同的Proposal由不同的编号进行区分，当某个Proposal被超过一半的Acceptors接受后，这个Proposal就被选定了。\n\n既然允许Acceptors接受多个Proposal就有可能出现多个不同值都被最终选定的情况，这违背了Safety要求，为了保证Safety要求，Paxos进一步提出：\n\n**P2：如果值为v的Proposal被选定（Chosen），则任何被选定（Chosen）的具有更高编号的Proposal值也一定为v。**\n\n只要算法同时满足**P1**和**P2**，就保证了Safety。**P2**是一个比较宽泛的约定，完全没有算法细节，我们对其进一步延伸：\n\n**P2a：如果值为v的Proposal被选定（Chosen），则对所有的Acceptors，它们接受（Accept）的任何具有更高编号的Proposal值也一定为v。**\n\n如果满足**P2a**则一定满足**P2**，显然，因为只有首先被接受才有可能被最终选定。但是**P2a**依然难以实现，因为acceptor很有可能并不知道之前被选定的Proposal（恰好不在接受它的多数派中），因此进一步延伸：\n\n**P2b：如果值为v的Proposal被选定（Chosen），则对所有的Proposer，它们提出的的任何具有更高编号的Proposal值也一定为v。**\n\n更进一步的：\n\n**P2c：为了提出值为v且编号为n的Proposal，必须存在一个包含超过一半Acceptors的集合S，满足(1) 没有任何S中的Acceptors曾经接受（Accept）过编号比n小的Proposal，或者(2) v和S中的Acceptors所接受过(Accept)的编号最大且小于n的Proposal值一致。**\n\n满足**P2c**即满足**P2b**即满足**P2a**即满足**P2**。至此Paxos提出了Proposer的执行流程，以满足**P2c**：\n\n1.  Proposer选择一个新的编号n，向超过一半的Acceptors发送请求消息，Acceptor回复: (a)承诺不会接受编号比n小的proposal，以及(b)它所接受过的编号比n小的最大Proposal（如果有）。该请求称为Prepare请求。\n2.  如果Proposer收到超过一半Acceptors的回复，它就可以提出Proposal，Proposal的值为收到回复中编号最大的Proposal的值，如果没有这样的值，则可以自由提出任何值。\n3.  向收到回复的Acceptors发送Accept请求，请求对方接受提出的Proposal。\n\n仔细品味Proposer的执行流程，其完全吻合**P2c**中的要求，但你可能也发现了，当多个Proposer同时运行时，有可能出现没有任何Proposal可以成功被接受的情况（编号递增的交替完成第一步），这就是Paxos算法的Liveness问题，或者叫“活锁”，论文中建议通过对Proposers引入选主算法选出Distinguished Proposer来全权负责提出Proposal来解决这个问题，但是即使在出现多个Proposers同时提出Proposal的情况时，Paxos算法也可以保证Safety。\n\n接下来看看Acceptors的执行过程，和我们对**P2**做的事情一样，我们对**P1**进行延伸：\n\n**P1a：Acceptor可以接受（Accept）编号为n的Proposal当且仅当它没有回复过一个具有更大编号的Prepare消息。**\n\n易见，**P1a**包含了**P1**，对于Acceptors：\n\n1.  当收到Prepare请求时，如果其编号n大于之前所收到的Prepare消息，则回复。\n2.  当收到Accept请求时，仅当它没有回复过一个具有更大编号的Prepare消息，接受该Proposal并回复。\n\n以上涵盖了满足**P1a**和**P2b**的一套完整一致性算法。"]],[166,7379],[166,166]]],[1555170046735,["kmg@DESKTOP-L4V0PJN",[[-1,153,"分布式一致性算法"]],[153,161],[153,153]]],[1555170047438,["kmg@DESKTOP-L4V0PJN",[[1,153,"zhu"]],[153,153],[156,156]]],[1555170048600,["kmg@DESKTOP-L4V0PJN",[[-1,153,"zhu"]],[156,156],[153,153]]],[1555170054562,["kmg@DESKTOP-L4V0PJN",[[1,153,"注解开发"]],[153,153],[157,157]]],[1555170070241,["kmg@DESKTOP-L4V0PJN",[[1,162,"要深入学习注解，我们就必须能定义自己的注解，并使用注解，在定义自己的注解之前，我们就必须要了解Java为我们提供的元注解和相关定义注解的语法。\n\n* * *\n\n**元注解：**\n\n　　元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：\n　　　　1.@Target,\n　　　　2.@Retention,\n　　　　3.@Documented,\n　　　　4.@Inherited\n　　这些类型和它们所支持的类在java.lang.annotation包中可以找到。下面我们看一下每个元注解的作用和相应分参数的使用说明。\n\n* * *\n\n　　**@Target：**\n\n　　　@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。\n\n　**作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）**\n\n　**　取值(ElementType)有：**\n\n　　　　1.CONSTRUCTOR:用于描述构造器\n　　　　2.FIELD:用于描述域\n　　　　3.LOCAL_VARIABLE:用于描述局部变量\n　　　　4.METHOD:用于描述方法\n　　　　5.PACKAGE:用于描述包\n　　　　6.PARAMETER:用于描述参数\n　　　　7.TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n　　使用实例：　　\n\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n@Target(ElementType.TYPE) public @interface Table { /** * 数据表名称注解，默认值为类名称\n     * @return\n     */\n    public String tableName() default \"className\";\n}\n\n@Target(ElementType.FIELD) public @interface NoDBColumn {\n\n}\n\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n　　注解Table 可以用于注解类、接口(包括注解类型) 或enum声明,而注解NoDBColumn仅可用于注解类的成员变量。\n\n* * *\n\n**　　@Retention：**\n\n　**　@Retention**定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。\n\n　　**作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）**\n\n　**　取值（RetentionPoicy）有：**\n\n　　　　1.SOURCE:在源文件中有效（即源文件保留）\n　　　　2.CLASS:在class文件中有效（即class保留）\n　　　　3.RUNTIME:在运行时有效（即运行时保留）\n\n　　Retention meta-annotation类型有唯一的value作为成员，它的取值来自java.lang.annotation.RetentionPolicy的枚举类型值。具体实例如下：\n\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME) public @interface Column { public String name() default \"fieldName\"; public String setFuncName() default \"setField\"; public String getFuncName() default \"getField\"; public boolean defaultDBValue() default false;\n}\n\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 　　Column注解的的RetentionPolicy的属性值是RUTIME,这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理\n\n* * *\n\n**　　@Documented:**\n\n**　　**@****Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。\n\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented public @interface Column { public String name() default \"fieldName\"; public String setFuncName() default \"setField\"; public String getFuncName() default \"getField\"; public boolean defaultDBValue() default false;\n}\n\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n* * *\n\n**　　@Inherited：**\n\n@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。\n\n　　注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。\n\n　　当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。\n\n　　实例代码：\n\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n/** * \n * @author peida\n * */ @Inherited public @interface Greeting { public enum FontColor{ BULE,RED,GREEN};\n    String name();\n    FontColor fontColor() default FontColor.GREEN;\n}\n\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n* * *\n\n**自定义注解：**\n\n　　使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。\n\n　　**定义注解格式：**\n　　public @interface 注解名 {定义体}\n\n**注解参数的可支持数据类型：**\n\n　　　　1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)\n　　　　2.String类型\n　　　　3.Class类型\n　　　　4.enum类型\n　　　　5.Annotation类型\n　　　　6.以上所有类型的数组\n\n　　Annotation类型里面的参数该怎么设定: \n　　第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　\n　　第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　\n　　第三,如果只有一个参数成员,最好把参数名称设为\"value\",后加小括号"]],[162,162],[4596,4596]]],[1555170076412,["kmg@DESKTOP-L4V0PJN",[[1,235,"> \n\n"]],[162,162],[237,237]]],[1555170080165,["kmg@DESKTOP-L4V0PJN",[[-1,162,"要深入学习注解，我们就必须能定义自己的注解，并使用注解，在定义自己的注解之前，我们就必须要了解Java为我们提供的元注解和相关定义注解的语法。\n"]],[162,234],[162,162]]],[1555170081856,["kmg@DESKTOP-L4V0PJN",[[1,165,"要深入学习注解，我们就必须能定义自己的注解，并使用注解，在定义自己的注解之前，我们就必须要了解Java为我们提供的元注解和相关定义注解的语法。\n"]],[165,165],[237,237]]],[1555170083477,["kmg@DESKTOP-L4V0PJN",[[-1,162,"\n"]],[162,162],[161,161]]],[1555170086334,["kmg@DESKTOP-L4V0PJN",[[-1,237,"\n"]],[236,236],[235,235]]],[1555170163061,["kmg@DESKTOP-L4V0PJN",[[1,244,"#"],[-1,2364," "],[1,2365," "],[-1,4122," "],[1,4123," "],[-1,4329," "],[1,4330," "]],[244,244],[245,245]]],[1555170165257,["kmg@DESKTOP-L4V0PJN",[[1,245,"# "]],[245,245],[247,247]]],[1555170175067,["kmg@DESKTOP-L4V0PJN",[[-1,491,"* * *"]],[491,496],[491,491]]],[1555170175832,["kmg@DESKTOP-L4V0PJN",[[-1,492,"\n"]],[491,491],[490,490]]],[1555170179155,["kmg@DESKTOP-L4V0PJN",[[-1,492,"　　"]],[494,494],[492,492]]],[1555170182224,["kmg@DESKTOP-L4V0PJN",[[1,492,"### "]],[492,492],[496,496]]],[1555170196440,["kmg@DESKTOP-L4V0PJN",[[-1,931,"[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[931,1015],[931,931]]],[1555170197971,["kmg@DESKTOP-L4V0PJN",[[-1,932,"\n"]],[931,931],[930,930]]],[1555170198600,["kmg@DESKTOP-L4V0PJN",[[-1,931,"\n"]],[930,930],[929,929]]],[1555170201270,["kmg@DESKTOP-L4V0PJN",[[-1,920,"　　"]],[920,922],[920,920]]],[1555170206997,["kmg@DESKTOP-L4V0PJN",[[1,928,"···"]],[928,928],[931,931]]],[1555170208011,["kmg@DESKTOP-L4V0PJN",[[-1,928,"···"]],[931,931],[928,928]]],[1555170208873,["kmg@DESKTOP-L4V0PJN",[[1,928,"~"]],[928,928],[929,929]]],[1555170209843,["kmg@DESKTOP-L4V0PJN",[[-1,928,"~"]],[929,929],[928,928]]],[1555170210631,["kmg@DESKTOP-L4V0PJN",[[1,928,"·"]],[928,928],[929,929]]],[1555170211349,["kmg@DESKTOP-L4V0PJN",[[-1,928,"·"]],[929,929],[928,928]]],[1555170212626,["kmg@DESKTOP-L4V0PJN",[[1,928,"```"]],[928,928],[931,931]]],[1555170213149,["kmg@DESKTOP-L4V0PJN",[[1,931,"language\n```\n"]],[931,931],[931,939]]],[1555170214030,["kmg@DESKTOP-L4V0PJN",[[-1,931,"language"],[1,939," "]],[931,939],[932,932]]],[1555170215788,["kmg@DESKTOP-L4V0PJN",[[1,932,"java"]],[932,932],[936,936]]],[1555170218148,["kmg@DESKTOP-L4V0PJN",[[-1,937,"```"]],[940,940],[937,937]]],[1555170219628,["kmg@DESKTOP-L4V0PJN",[[-1,938,"\n"]],[937,937],[936,936]]],[1555170221126,["kmg@DESKTOP-L4V0PJN",[[-1,937,"\n"]],[937,937],[936,936]]],[1555170230057,["kmg@DESKTOP-L4V0PJN",[[1,1149,"```"]],[1149,1149],[1152,1152]]],[1555170230511,["kmg@DESKTOP-L4V0PJN",[[1,1152,"language\n```\n"]],[1152,1152],[1152,1160]]],[1555170240497,["kmg@DESKTOP-L4V0PJN",[[-1,1152,"language\n```\n"]],[1152,1165],[1152,1152]]],[1555170244010,["kmg@DESKTOP-L4V0PJN",[[-1,1153,"[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[1153,1237],[1153,1153]]],[1555170257525,["kmg@DESKTOP-L4V0PJN",[[-1,931," java"]],[936,936],[931,931]]],[1555170267352,["kmg@DESKTOP-L4V0PJN",[[1,1109,"\n"]],[1109,1109],[1110,1110]]],[1555170269561,["kmg@DESKTOP-L4V0PJN",[[-1,1110," "]],[1111,1111],[1110,1110]]],[1555170304047,["kmg@DESKTOP-L4V0PJN",[[-1,957," "],[1,958,"\n"],[1,983,"\n   "],[1,987,"\n"],[-1,1005,"\n    "],[1,1010," *"],[-1,1023,"   "],[-1,1029,"  "]],[932,1143],[1140,1140]]],[1555170308604,["kmg@DESKTOP-L4V0PJN",[[1,931,"Java"]],[931,931],[935,935]]],[1555170317030,["kmg@DESKTOP-L4V0PJN",[[1,988,"\n"]],[987,987],[988,988]]],[1555170331221,["kmg@DESKTOP-L4V0PJN",[[1,1084,"```"]],[1084,1084],[1087,1087]]],[1555170334610,["kmg@DESKTOP-L4V0PJN",[[1,1088,"\n"]],[1087,1087],[1088,1088]]],[1555170341521,["kmg@DESKTOP-L4V0PJN",[[1,1088,"```Java"]],[1088,1088],[1095,1095]]],[1555170354483,["kmg@DESKTOP-L4V0PJN",[[-1,1060," "]],[1060,1061],[1060,1060]]],[1555170357533,["kmg@DESKTOP-L4V0PJN",[[1,1060," "]],[1060,1060],[1061,1061]]],[1555170367422,["kmg@DESKTOP-L4V0PJN",[[-1,1079,"\""]],[1079,1080],[1079,1079]]],[1555170370062,["kmg@DESKTOP-L4V0PJN",[[-1,1069,"\""]],[1069,1070],[1069,1069]]],[1555170375552,["kmg@DESKTOP-L4V0PJN",[[1,1078,"\""]],[1078,1078],[1079,1079]]],[1555170380171,["kmg@DESKTOP-L4V0PJN",[[1,1069,"\""]],[1069,1069],[1070,1070]]],[1555170391825,["kmg@DESKTOP-L4V0PJN",[[-1,1228,"* * *\n"]],[1227,1233],[1227,1227]]],[1555170395770,["kmg@DESKTOP-L4V0PJN",[[-1,1231,"　　"]],[1231,1233],[1231,1231]]],[1555170399830,["kmg@DESKTOP-L4V0PJN",[[1,1229,"### "]],[1229,1229],[1233,1233]]],[1555170409590,["kmg@DESKTOP-L4V0PJN",[[-1,1756,"[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[1756,1840],[1756,1756]]],[1555170410439,["kmg@DESKTOP-L4V0PJN",[[-1,1757,"\n"]],[1756,1756],[1755,1755]]],[1555170415178,["kmg@DESKTOP-L4V0PJN",[[-1,1757,"@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME) public @interface Column { public String name() default \"fieldName\"; public String setFuncName() default \"setField\"; public String getFuncName() default \"getField\"; public boolean defaultDBValue() default false;\n}"]],[1757,2033],[1757,1757]]],[1555170431374,["kmg@DESKTOP-L4V0PJN",[[1,1755,"1. "]],[1755,1755],[1758,1758]]],[1555170433822,["kmg@DESKTOP-L4V0PJN",[[-1,1755,"1. "]],[1758,1758],[1755,1755]]],[1555170447616,["kmg@DESKTOP-L4V0PJN",[[1,1756,"```"]],[1756,1756],[1759,1759]]],[1555170448153,["kmg@DESKTOP-L4V0PJN",[[1,1759,"language\n```\n"]],[1759,1759],[1759,1767]]],[1555170449124,["kmg@DESKTOP-L4V0PJN",[[-1,1759,"language"],[1,1767,"J"]],[1759,1767],[1760,1760]]],[1555170449896,["kmg@DESKTOP-L4V0PJN",[[1,1760,"ava"]],[1760,1760],[1763,1763]]],[1555170451297,["kmg@DESKTOP-L4V0PJN",[[1,1764,"\n"]],[1763,1763],[1764,1764]]],[1555170452536,["kmg@DESKTOP-L4V0PJN",[[1,1764,"@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Column {\n    public String name() default \"fieldName\";\n\n    public String setFuncName() default \"setField\";\n\n    public String getFuncName() default \"getField\";\n\n    public boolean defaultDBValue() default false;\n}"]],[1764,1764],[2059,2059]]],[1555170460360,["kmg@DESKTOP-L4V0PJN",[[-1,2067,"[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[2067,2151],[2067,2067]]],[1555170472926,["kmg@DESKTOP-L4V0PJN",[[-1,2285,"[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[2285,2369],[2285,2285]]],[1555170476201,["kmg@DESKTOP-L4V0PJN",[[1,2286,"```"]],[2286,2286],[2289,2289]]],[1555170476687,["kmg@DESKTOP-L4V0PJN",[[1,2289,"language\n```\n"]],[2289,2289],[2289,2297]]],[1555170478635,["kmg@DESKTOP-L4V0PJN",[[-1,2289,"language"]],[2289,2297],[2289,2289]]],[1555170479909,["kmg@DESKTOP-L4V0PJN",[[1,2289,"Java"]],[2289,2289],[2293,2293]]],[1555170483201,["kmg@DESKTOP-L4V0PJN",[[-1,2299,"@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented public @interface Column { public String name() default \"fieldName\"; public String setFuncName() default \"setField\"; public String getFuncName() default \"getField\"; public boolean defaultDBValue() default false;\n}"]],[2299,2587],[2299,2299]]],[1555170484612,["kmg@DESKTOP-L4V0PJN",[[1,2294,"\n"]],[2293,2293],[2294,2294]]],[1555170485223,["kmg@DESKTOP-L4V0PJN",[[1,2294,"@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented public @interface Column { public String name() default \"fieldName\"; public String setFuncName() default \"setField\"; public String getFuncName() default \"getField\"; public boolean defaultDBValue() default false;\n}"]],[2294,2294],[2582,2582]]],[1555170488912,["kmg@DESKTOP-L4V0PJN",[[1,2396,"  "]],[2396,2396],[2398,2398]]],[1555170492085,["kmg@DESKTOP-L4V0PJN",[[1,2369,"\n"]],[2369,2369],[2370,2370]]],[1555170494782,["kmg@DESKTOP-L4V0PJN",[[1,2406,"  "]],[2406,2406],[2408,2408]]],[1555170497792,["kmg@DESKTOP-L4V0PJN",[[1,2396,"\n"]],[2396,2396],[2397,2397]]],[1555170501017,["kmg@DESKTOP-L4V0PJN",[[-1,2406,"   "]],[2409,2409],[2406,2406]]],[1555170502145,["kmg@DESKTOP-L4V0PJN",[[1,2406," "]],[2406,2406],[2407,2407]]],[1555170509956,["kmg@DESKTOP-L4V0PJN",[[1,2442,"\n   "]],[2442,2442],[2446,2446]]],[1555170512947,["kmg@DESKTOP-L4V0PJN",[[1,2494,"\n   "]],[2494,2494],[2498,2498]]],[1555170514495,["kmg@DESKTOP-L4V0PJN",[[1,2546,"\n   "]],[2546,2546],[2550,2550]]],[1555170522283,["kmg@DESKTOP-L4V0PJN",[[-1,2605,"\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n"]],[2604,2691],[2604,2604]]],[1555170529156,["kmg@DESKTOP-L4V0PJN",[[-1,3073,"[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n"]],[3073,3158],[3073,3073]]],[1555170535097,["kmg@DESKTOP-L4V0PJN",[[1,3073,"```"]],[3073,3073],[3076,3076]]],[1555170535539,["kmg@DESKTOP-L4V0PJN",[[1,3076,"language\n```\n"]],[3076,3076],[3076,3084]]],[1555170537241,["kmg@DESKTOP-L4V0PJN",[[-1,3076,"language"],[1,3084,"J"]],[3076,3084],[3077,3077]]],[1555170537701,["kmg@DESKTOP-L4V0PJN",[[1,3077,"v"]],[3077,3077],[3078,3078]]],[1555170538566,["kmg@DESKTOP-L4V0PJN",[[-1,3077,"v"]],[3078,3078],[3077,3077]]],[1555170539329,["kmg@DESKTOP-L4V0PJN",[[1,3077,"ava"]],[3077,3077],[3080,3080]]],[1555170543034,["kmg@DESKTOP-L4V0PJN",[[-1,3086,"/** * \n * @author peida\n * */ @Inherited public @interface Greeting { public enum FontColor{ BULE,RED,GREEN};\n    String name();\n    FontColor fontColor() default FontColor.GREEN;\n}"]],[3086,3267],[3086,3086]]],[1555170544552,["kmg@DESKTOP-L4V0PJN",[[1,3081,"\n"]],[3080,3080],[3081,3081]]],[1555170545060,["kmg@DESKTOP-L4V0PJN",[[1,3081,"/** * \n * @author peida\n * */ @Inherited public @interface Greeting { public enum FontColor{ BULE,RED,GREEN};\n    String name();\n    FontColor fontColor() default FontColor.GREEN;\n}"]],[3081,3081],[3262,3262]]],[1555170548659,["kmg@DESKTOP-L4V0PJN",[[1,3151,"\n "]],[3151,3151],[3153,3153]]],[1555170554677,["kmg@DESKTOP-L4V0PJN",[[1,3111,"\n "]],[3111,3111],[3113,3113]]],[1555170556435,["kmg@DESKTOP-L4V0PJN",[[1,3124,"\n "]],[3124,3124],[3126,3126]]],[1555170561230,["kmg@DESKTOP-L4V0PJN",[[1,3157,"  "]],[3157,3157],[3159,3159]]],[1555170576064,["kmg@DESKTOP-L4V0PJN",[[1,3182,"  \n   "]],[3182,3182],[3188,3188]]],[1555170579457,["kmg@DESKTOP-L4V0PJN",[[1,3193,"\n   "]],[3193,3193],[3197,3197]]],[1555170580911,["kmg@DESKTOP-L4V0PJN",[[1,3201,"\n   "]],[3201,3201],[3205,3205]]],[1555170583219,["kmg@DESKTOP-L4V0PJN",[[1,3210,"\n   "]],[3210,3210],[3214,3214]]],[1555170588418,["kmg@DESKTOP-L4V0PJN",[[1,3188,"  "]],[3188,3188],[3190,3190]]],[1555170589425,["kmg@DESKTOP-L4V0PJN",[[1,3199,"  "]],[3199,3199],[3201,3201]]],[1555170590463,["kmg@DESKTOP-L4V0PJN",[[1,3209,"  "]],[3209,3209],[3211,3211]]],[1555170608624,["kmg@DESKTOP-L4V0PJN",[[-1,3301,"\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n* * *\n\n"]],[3300,3394],[3300,3300]]],[1555170616970,["kmg@DESKTOP-L4V0PJN",[[-1,2067,"\n\n"]],[2065,2067],[2065,2065]]],[1555170618236,["kmg@DESKTOP-L4V0PJN",[[-1,2066,"\n"]],[2066,2066],[2065,2065]]],[1555170622235,["kmg@DESKTOP-L4V0PJN",[[-1,2147,"* * *\n"]],[2146,2152],[2146,2146]]],[1555170626164,["kmg@DESKTOP-L4V0PJN",[[-1,2150,"　　"]],[2150,2152],[2150,2150]]],[1555170630724,["kmg@DESKTOP-L4V0PJN",[[1,2148,"### "]],[2148,2148],[2152,2152]]],[1555170659806,["kmg@DESKTOP-L4V0PJN",[[1,267,"**"],[1,275,"**"]],[267,275],[267,279]]],[1555170675548,["kmg@DESKTOP-L4V0PJN",[[1,502,"1."]],[502,502],[504,504]]],[1555170685105,["kmg@DESKTOP-L4V0PJN",[[-1,504,"@"]],[505,505],[504,504]]],[1555170688491,["kmg@DESKTOP-L4V0PJN",[[1,510,"yu"]],[510,510],[512,512]]],[1555170689405,["kmg@DESKTOP-L4V0PJN",[[-1,510,"yu"]],[512,512],[510,510]]],[1555170692093,["kmg@DESKTOP-L4V0PJN",[[1,510,"元注解"]],[510,510],[513,513]]],[1555170698851,["kmg@DESKTOP-L4V0PJN",[[-1,1243,"@"]],[1244,1244],[1243,1243]]],[1555170700623,["kmg@DESKTOP-L4V0PJN",[[1,1243,"2、.。"]],[1243,1243],[1247,1247]]],[1555170702657,["kmg@DESKTOP-L4V0PJN",[[-1,1243,"2、.。"]],[1247,1247],[1243,1243]]],[1555170704874,["kmg@DESKTOP-L4V0PJN",[[1,1243,"2."]],[1243,1243],[1245,1245]]],[1555170708439,["kmg@DESKTOP-L4V0PJN",[[-1,1254,"："]],[1255,1255],[1254,1254]]],[1555170711963,["kmg@DESKTOP-L4V0PJN",[[1,1254,"元注解"]],[1254,1254],[1257,1257]]],[1555170716668,["kmg@DESKTOP-L4V0PJN",[[-1,2165,"@"]],[2166,2166],[2165,2165]]],[1555170717261,["kmg@DESKTOP-L4V0PJN",[[1,2165,"2"]],[2165,2165],[2166,2166]]],[1555170718310,["kmg@DESKTOP-L4V0PJN",[[-1,2165,"2"]],[2166,2166],[2165,2165]]],[1555170718974,["kmg@DESKTOP-L4V0PJN",[[1,2165,"3."]],[2165,2165],[2167,2167]]],[1555170722658,["kmg@DESKTOP-L4V0PJN",[[-1,2177,":"]],[2178,2178],[2177,2177]]],[1555170726002,["kmg@DESKTOP-L4V0PJN",[[1,2177,"元注解"]],[2177,2177],[2180,2180]]],[1555170729335,["kmg@DESKTOP-L4V0PJN",[[-1,2623,"@"]],[2624,2624],[2623,2623]]],[1555170729996,["kmg@DESKTOP-L4V0PJN",[[1,2623,"@"]],[2623,2623],[2624,2624]]],[1555170731142,["kmg@DESKTOP-L4V0PJN",[[-1,2623,"@"]],[2624,2624],[2623,2623]]],[1555170733003,["kmg@DESKTOP-L4V0PJN",[[1,2623,"4."]],[2623,2623],[2625,2625]]],[1555170735877,["kmg@DESKTOP-L4V0PJN",[[-1,2634,"："]],[2635,2635],[2634,2634]]],[1555170738582,["kmg@DESKTOP-L4V0PJN",[[1,2634,"元注解"]],[2634,2634],[2637,2637]]],[1555170742587,["kmg@DESKTOP-L4V0PJN",[[-1,2621,"　　"]],[2623,2623],[2621,2621]]],[1555170746452,["kmg@DESKTOP-L4V0PJN",[[1,2619,"### "]],[2619,2619],[2623,2623]]],[1555170749630,["kmg@DESKTOP-L4V0PJN",[[-1,2612,"* * *\n"]],[2611,2617],[2611,2611]]],[1555170751185,["kmg@DESKTOP-L4V0PJN",[[-1,2612,"\n"]],[2612,2612],[2611,2611]]],[1555170764971,["kmg@DESKTOP-L4V0PJN",[[1,3306,"### "]],[3306,3306],[3310,3310]]],[1555170786191,["kmg@DESKTOP-L4V0PJN",[[-1,3308,"#"]],[3309,3309],[3308,3308]]],[1555170800241,["kmg@DESKTOP-L4V0PJN",[[-1,3770,"第一"],[1,3772,"1"]],[3770,3772],[3771,3771]]],[1555170801409,["kmg@DESKTOP-L4V0PJN",[[1,3771,"."]],[3771,3771],[3772,3772]]],[1555170803590,["kmg@DESKTOP-L4V0PJN",[[-1,3772,","]],[3773,3773],[3772,3772]]],[1555170805533,["kmg@DESKTOP-L4V0PJN",[[-1,3844,"第二,"],[1,3847,"2"]],[3844,3847],[3845,3845]]],[1555170806053,["kmg@DESKTOP-L4V0PJN",[[1,3845,"."]],[3845,3845],[3846,3846]]],[1555170809984,["kmg@DESKTOP-L4V0PJN",[[-1,3997,"第三,"],[1,4000,"3"]],[3997,4000],[3998,3998]]],[1555170811008,["kmg@DESKTOP-L4V0PJN",[[1,3998,"."]],[3998,3998],[3999,3999]]],[1555170815082,["kmg@DESKTOP-L4V0PJN",[[1,4032,"。"]],[4032,4032],[4033,4033]]],[1555170819514,["kmg@DESKTOP-L4V0PJN",[[-1,3740,"\n"]],[3740,3740],[3739,3739]]],[1555170826733,["kmg@DESKTOP-L4V0PJN",[[-1,3601,"　　　　"]],[3601,3605],[3601,3601]]],[1555170829947,["kmg@DESKTOP-L4V0PJN",[[-1,3659,"　　　　"]],[3659,3663],[3659,3659]]],[1555170832534,["kmg@DESKTOP-L4V0PJN",[[-1,3670,"　　　　"]],[3670,3674],[3670,3670]]],[1555170834499,["kmg@DESKTOP-L4V0PJN",[[-1,3680,"　　　　"]],[3680,3684],[3680,3680]]],[1555170836869,["kmg@DESKTOP-L4V0PJN",[[-1,3689,"　　　　"]],[3689,3693],[3689,3689]]],[1555170839497,["kmg@DESKTOP-L4V0PJN",[[-1,3704,"　　　　"]],[3704,3708],[3704,3704]]],[1555170847995,["kmg@DESKTOP-L4V0PJN",[[1,3601,"  "],[1,3659,"  "],[1,3670,"  "],[1,3680,"  "],[1,3689,"  "],[1,3704,"  "]],[3601,3715],[3601,3727]]],[1555170849408,["kmg@DESKTOP-L4V0PJN",[[1,3603,"  "],[1,3663,"  "],[1,3674,"  "],[1,3688,"  "],[1,3697,"  "],[1,3714,"  "]],[3601,3727],[3601,3739]]],[1555170864136,["kmg@DESKTOP-L4V0PJN",[[1,3723,"  "]],[3723,3723],[3725,3725]]],[1555170867984,["kmg@DESKTOP-L4V0PJN",[[1,3605,"  "],[1,3667,"  "],[1,3678,"  "],[1,3696,"  "],[1,3705,"  "],[1,3726,"  "]],[3605,3741],[3607,3753]]],[1555170868629,["kmg@DESKTOP-L4V0PJN",[[1,3607,"  "],[1,3671,"  "],[1,3682,"  "],[1,3704,"  "],[1,3713,"  "],[1,3736,"  "]],[3607,3753],[3609,3765]]],[1555170869360,["kmg@DESKTOP-L4V0PJN",[[1,3609,"  "],[1,3675,"  "],[1,3686,"  "],[1,3712,"  "],[1,3721,"  "],[1,3746,"  "]],[3609,3765],[3611,3777]]],[1555170871119,["kmg@DESKTOP-L4V0PJN",[[-1,3609,"  "],[-1,3677,"  "],[-1,3690,"  "],[-1,3718,"  "],[-1,3729,"  "],[-1,3756,"  "]],[3611,3777],[3609,3765]]],[1555170871658,["kmg@DESKTOP-L4V0PJN",[[-1,3607,"  "],[-1,3673,"  "],[-1,3686,"  "],[-1,3710,"  "],[-1,3721,"  "],[-1,3746,"  "]],[3609,3765],[3607,3753]]],[1555170872356,["kmg@DESKTOP-L4V0PJN",[[-1,3605,"  "],[-1,3669,"  "],[-1,3682,"  "],[-1,3702,"  "],[-1,3713,"  "],[-1,3736,"  "]],[3607,3753],[3605,3741]]],[1555170912987,["kmg@DESKTOP-L4V0PJN",[[1,157,"，"]],[157,157],[158,158]]],[1555170913620,["kmg@DESKTOP-L4V0PJN",[[-1,157,"，"]],[158,158],[157,157]]],[1555170914756,["kmg@DESKTOP-L4V0PJN",[[1,157,","]],[157,157],[158,158]]],[1555170922456,["kmg@DESKTOP-L4V0PJN",[[-1,157,","]],[158,158],[157,157]]],[1555170961768,["kmg@DESKTOP-L4V0PJN",[[-1,3993,"　　"]],[3993,3995],[3993,3993]]],[1555170967984,["kmg@DESKTOP-L4V0PJN",[[-1,3839,"　 　"]],[3839,3842],[3839,3839]]],[1555171003609,["kmg@DESKTOP-L4V0PJN",[[-1,61,"2-13"]],[61,65],[61,61]]],[1555171010918,["kmg@DESKTOP-L4V0PJN",[[1,61,"3-28"]],[61,61],[65,65]]]],null,"kmg@DESKTOP-L4V0PJN"]]}