{"compress":true,"commitItems":[["94f435a9-9fb5-4ef1-9128-f279396f9fc6",1555171879855,"---\nlayout: post\ntitle: Java自定义注解\nsubtitle: null\ndate: 2019-03-28T00:00:00.000Z\nauthor: kmg\nheader-img: img/post-bg-os-metro.jpg\ncatalog: true\ntags:\n  - 注解开发\n---\n> 要深入学习注解，我们就必须能定义自己的注解，并使用注解，在定义自己的注解之前，我们就必须要了解Java为我们提供的元注解和相关定义注解的语法。\n\n* * *\n\n## **元注解：**\n\n　　元注解的作用就是**负责注解其他注解**。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：@Target,@Retention,@Documented,@Inherited\n　　这些类型和它们所支持的类在java.lang.annotation包中可以找到。下面我们看一下每个元注解的作用和相应分参数的使用说明。\n### **1.Target元注解：**\n\n　　　@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。\n\n　**作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）**\n\n　**　取值(ElementType)有：**\n1.CONSTRUCTOR:用于描述构造器\n2.FIELD:用于描述域\n3.LOCAL_VARIABLE:用于描述局部变量\n4.METHOD:用于描述方法\n5.PACKAGE:用于描述包\n6.PARAMETER:用于描述参数\n7.TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n使用实例：　　\n```Java\n@Target(ElementType.TYPE)\npublic @interface Table {\n\n    /**\n * 数据表名称注解，默认值为类名称 * * @return\n  */\n  public String tableName() default \"className\";\n}\n```\n```Java\n@Target(ElementType.FIELD)\npublic @interface NoDBColumn {\n\n}\n```\n　　注解Table 可以用于注解类、接口(包括注解类型) 或enum声明,而注解NoDBColumn仅可用于注解类的成员变量。\n\n\n### **2.Retention元注解**\n\n　**　@Retention**定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。\n\n　　**作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）**\n\n　**　取值（RetentionPoicy）有：**\n\n　　　　1.SOURCE:在源文件中有效（即源文件保留）\n　　　　2.CLASS:在class文件中有效（即class保留）\n　　　　3.RUNTIME:在运行时有效（即运行时保留）\n\n　　Retention meta-annotation类型有唯一的value作为成员，它的取值来自java.lang.annotation.RetentionPolicy的枚举类型值。具体实例如下：\n\n```Java\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Column {\n    public String name() default \"fieldName\";\n\n    public String setFuncName() default \"setField\";\n\n    public String getFuncName() default \"getField\";\n\n    public boolean defaultDBValue() default false;\n}\n```\n\n\n 　　Column注解的的RetentionPolicy的属性值是RUTIME,这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理\n\n\n### **3.Documented元注解**\n\n**　　**@****Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。\n\n\n```Java\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented \npublic @interface Column {\n   public String name() default \"fieldName\"; \n   public String setFuncName() default \"setField\"; \n   public String getFuncName() default \"getField\"; \n   public boolean defaultDBValue() default false;\n}\n```\n\n\n### **4.Inherited元注解**\n\n@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。\n\n　　注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。\n\n　　当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。\n\n　　实例代码：\n\n```Java\n/** * \n * @author peida\n * */ \n @Inherited \n public @interface Greeting { \n   public enum FontColor{   \n     BULE,\n     RED,\n     GREEN\n   };\n    String name();\n    FontColor fontColor() default FontColor.GREEN;\n}\n```\n\n\n## **自定义注解：**\n\n　　使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。\n\n　　**定义注解格式：**\n　　\n```java\npublic @interface 注解名 {\n  定义体\n}\n```\n\n**注解参数的可支持数据类型：**\n\n    1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)\n    2.String类型\n    3.Class类型\n    4.enum类型\n    5.Annotation类型  \n    6.以上所有类型的数组\n\nAnnotation类型里面的参数该怎么设定: \n　　1. 只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；\n　　2. 参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;\n　　3. 如果只有一个参数成员,最好把参数名称设为\"value\",后加小括号。\n",[[1555171869356,["kmg@DESKTOP-L4V0PJN",[[1,2793,"> \n\n"]],[2698,2791],[2795,2795]]],[1555171874505,["kmg@DESKTOP-L4V0PJN",[[-1,2698,"注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。"]],[2698,2791],[2698,2698]]],[1555171876238,["kmg@DESKTOP-L4V0PJN",[[1,2702,"注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。"]],[2702,2702],[2795,2795]]],[1555171878928,["kmg@DESKTOP-L4V0PJN",[[-1,2696,"　　"]],[2698,2698],[2696,2696]]],[1555171879609,["kmg@DESKTOP-L4V0PJN",[[-1,2697,"\n"]],[2696,2696],[2695,2695]]],[1555171880322,["kmg@DESKTOP-L4V0PJN",[[-1,2696,"\n"]],[2695,2695],[2694,2694]]]],null,"kmg@DESKTOP-L4V0PJN"]]}